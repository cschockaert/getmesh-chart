apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "getmesh.fullname" . }}-config
  labels:
    app: {{ template "getmesh.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
{{ (.Files.Glob "config/logback.xml").AsConfig | indent 2 }}
{{ (.Files.Glob "config/hazelcast.xml").AsConfig | indent 2 }}
{{ (.Files.Glob "config/mesh-ui-config.js").AsConfig | indent 2 }}
{{- (tpl (.Files.Glob "config/scripts/*.sh").AsConfig .) | nindent 2 }}

  default-distributed-db-config.json: |-
{{- $file := .Files.Get "config/default-distributed-db-config.json" | indent 6 }}
{{ tpl $file . }}

  mesh-backup.sh: |-
    #!/bin/bash
    set -euo pipefail
    source mesh-commons-vars.sh

    # keep alphabetical order with date YYYY-mm-DD-HH-MM-SS

    export CURRENT_DATE=$(date +%Y-%m-%d_%H-%M-%S)
    export TARGET_BACKUP_DIR=$BACKUPNFS_FOLDER/history/$CURRENT_DATE
    export LOG_FILE=$TARGET_BACKUP_DIR/job.log

    mkdir -p $TARGET_BACKUP_DIR

    bash mesh-backup-script.sh 2>&1 | tee $LOG_FILE

  mesh-backup-script.sh: |-
    #!/bin/bash
    set -euo pipefail
    source mesh-commons-vars.sh

    if [ -z ${TARGET_BACKUP_DIR} ]; then echo "TARGET_BACKUP_DIR not found"; exit 1; fi
    if [ -z ${CURRENT_DATE} ]; then echo "CURRENT_DATE not found"; exit 1; fi

    mkdir -p $TARGET_BACKUP_DIR
    echo "CURRENT_DATE="$CURRENT_DATE
    echo "TARGET_BACKUP_DIR="$TARGET_BACKUP_DIR

    echo "this script start getmesh instance that connect to the cluster and create a binary backup"
    echo "backups will be stored in folder $BACKUPNFS_FOLDER/history/backup-date/storage_xxx.zip and $BACKUPNFS_FOLDER/history/backup-date/uploads_xxx.tar"
    echo "date is in GMT format"

    bash mesh-backup-orientdb.sh
    bash mesh-backup-uploads.sh
    bash mesh-purge-old-backup.sh

    echo "ls -alrth "$BACKUP_HISTORY_FOLDER
    ls -alrth $BACKUP_HISTORY_FOLDER
    echo "ls -alrth "$TARGET_BACKUP_DIR
    ls -alrth $TARGET_BACKUP_DIR


  mesh-repair-orientdb.sh: |-
    #!/bin/bash
    set -euxo pipefail
    source mesh-commons-vars.sh

    #console.sh "connect plocal:/graphdb/storage admin admin; rebuild index *"
    console.sh "connect plocal:/graphdb/storage admin admin; repair database --fix-graph -v"
    #console.sh "connect plocal:/graphdb/storage admin admin; repair database --fix-links -v"
    console.sh "connect plocal:/graphdb/storage admin admin; repair database --fix-ridbags -v"
    console.sh "connect plocal:/graphdb/storage admin admin; repair database --fix-bonsai -v"
    console.sh "connect plocal:/graphdb/storage admin admin; check database -v"

  mesh-backup-orientdb.sh: |-
    #!/bin/bash
    set -euxo pipefail
    source mesh-commons-vars.sh

    if [ -z ${TARGET_BACKUP_DIR} ]; then echo "TARGET_BACKUP_DIR not found"; exit 1; fi
    if [ -z ${CURRENT_DATE} ]; then echo "CURRENT_DATE not found"; exit 1; fi
    #export JAVA_TOOL_OPTIONS="-Xms256m -Xmx768m"

    export MESH_NODE_NAME="getmesh-backup-cronjob"
    echo ${CURRENT_DATE} > /mesh/mesh.log
    java $JAVA_START_OPTIONS -cp /mesh/mesh.jar com.gentics.mesh.server.ServerRunner 2>&1 > mesh.log &
    MESH_PID=$!
    echo "tail until server is started (or 10 min timeout)"
    timeout 600 grep -q 'startup-complete' <( tail -f /mesh/mesh.log) || true
    #sleep 600

    echo "startup-complete detected, killing mesh process"
    pkill java
    echo "wait 30s then, invoke backup"
    sleep 30

    export ORIENTDB_OPTS_MEMORY="-Xmx768m "
    backup.sh plocal:/graphdb/storage/ admin admin $TARGET_BACKUP_DIR/storage_$CURRENT_DATE.zip default 2>&1

    ls -alrth $TARGET_BACKUP_DIR
    echo "done"


  mesh-restore.sh: |-
    #!/bin/bash
    set -euo pipefail
    source mesh-commons-vars.sh

    echo "restore procedure will move latest orientdb backup zip file in restore folder of the MASTER node"
    echo "you can use /config/restore-from-remote.sh to restore remotes backups (with curl)"
    echo "then you need to restart getmesh master node, he will start under the restored database under a new RANDOM cluster (and will not rejoin replicas instances)"
    echo "you can test the master node, then if it's ok you have to restart all the instance replicas + the master node, they will recreate the original cluster"
    echo "after that you need to restore binary uploads (if needed) by running sh /config/restore-uploads.sh"

    if [ -z ${BACKUP_HISTORY_FOLDER} ]; then echo "$BACKUP_HISTORY_FOLDER not found"; exit 1; fi

    #find most recent backup
    export MOST_RECENT_BACKUP_FOLDER=$BACKUP_HISTORY_FOLDER/$(ls $BACKUP_HISTORY_FOLDER | tail -1)
    export BINARY_TAR=$(ls -Art $MOST_RECENT_BACKUP_FOLDER/*.tar | tail -n 1)
    export ORIENTDB_ZIP=$(ls -Art $MOST_RECENT_BACKUP_FOLDER/*.zip | tail -n 1)

    if [ -z ${ORIENTDB_ZIP} ]; then echo "ORIENTDB_ZIP not found"; exit 1; fi
    if [ -z ${BINARY_TAR} ]; then echo "BINARY_TAR not found"; exit 1; fi

    bash mesh-restore-orientdb.sh

    read -p "Press enter to continue, will restore uploads (do it after mesh master restart)"
    bash mesh-restore-uploads.sh

    echo "you perhaps need to reindex elasticsearch after restore is done"
    echo "you can do it via mesh-search-clear/sync.sh or mesh-cli"


  mesh-restore-latest-green-PROD.sh: |-
    bash mesh-restore-remote-latest.sh https://getmesh-backup-explorer.getmesh-green.gcp.prd.auchan.net/nfs-fileserver/getmesh-green-getmesh-backups/history/

  mesh-restore-latest-blue-PROD.sh: |-
    bash mesh-restore-remote-latest.sh https://getmesh-backup-explorer.getmesh-blue.gcp.prd.auchan.net/nfs-fileserver/getmesh-blue-getmesh-backups/history/

  mesh-restore-remote-latest.sh: |-
    #!/bin/bash
    set -euo pipefail
    source mesh-commons-vars.sh

    if [[ $# -ne 1 ]]; then
      echo 'usage mesh-restore-remote-latest.sh https://getmesh-backup-explorer.XXX.gcp.prd.auchan.net/nfs-fileserver/XXX-backups/history/'
    fi

    REMOTE_BACKUP_URL_HISTORY_FOLDER=$1
    echo 'will restore latest backup from ' $REMOTE_BACKUP_URL_HISTORY_FOLDER
    REMOTE_BACKUP_URL_FOLDER_HISTORY_CONTENT=`curl --silent $REMOTE_BACKUP_URL_HISTORY_FOLDER`
    LATEST_HISTORY_DATE=`echo $REMOTE_BACKUP_URL_FOLDER_HISTORY_CONTENT | egrep -o [0-9-]+_[0-9-]+ | tail -n1`
    REMOTE_BACKUP_URL_FOLDER=`echo $REMOTE_BACKUP_URL_HISTORY_FOLDER/$LATEST_HISTORY_DATE/`
    bash mesh-restore-from-remote.sh $REMOTE_BACKUP_URL_FOLDER

  mesh-restore-from-remote.sh: |-
    #!/bin/bash
    set -euo pipefail
    source mesh-commons-vars.sh

    echo 'usage: mesh-restore-from-remote.sh https://getmesh-backup-explorer.getmesh-blue.gcp.prd.auchan.net/nfs-fileserver/getmesh-blue-getmesh-backups/history/XXXX/'
    if [[ $# -eq 1 ]]; then
      REMOTE_BACKUP_URL_FOLDER=$1
      echo "using REMOTE_BACKUP_URL_FOLDER as " $REMOTE_BACKUP_URL_FOLDER
    fi

    if [ ! -z ${REMOTE_BACKUP_URL_FOLDER} ]; then
      REMOTE_BACKUP_URL_FOLDER_CONTENT=`curl --silent $REMOTE_BACKUP_URL_FOLDER`
      ORIENTDB_REMOTE_ZIP=`echo ${REMOTE_BACKUP_URL_FOLDER_CONTENT} | egrep -o "storage_[0-9-]+_[0-9-]+.zip" | head -n1 | xargs -I{} echo $REMOTE_BACKUP_URL_FOLDER/{}`
      BINARY_REMOTE_TAR=`echo ${REMOTE_BACKUP_URL_FOLDER_CONTENT} | egrep -o "uploads_[0-9-]+_[0-9-]+.tar" | head -n1 | xargs -I{} echo $REMOTE_BACKUP_URL_FOLDER/{}`
      echo found ORIENTDB_REMOTE_ZIP=$ORIENTDB_REMOTE_ZIP
      echo found BINARY_REMOTE_TAR=$BINARY_REMOTE_TAR
    fi
    if [ -z ${ORIENTDB_REMOTE_ZIP} ]; then echo "ORIENTDB_REMOTE_ZIP not found"; exit 1; fi
    if [ -z ${BINARY_REMOTE_TAR} ]; then echo "BINARY_REMOTE_TAR not found"; exit 1; fi

    set -u
    read -p "Press enter to continue, will download backup"
    TEMP=$(mktemp -d)
    curl -o $TEMP/orientdb-restore.zip $ORIENTDB_REMOTE_ZIP
    curl -o $TEMP/uploads-restore.zip $BINARY_REMOTE_TAR

    read -p "Press enter to continue, will restore orientdb zip and uploads"
    export BINARY_TAR=$TEMP/uploads-restore.zip
    export ORIENTDB_ZIP=$TEMP/orientdb-restore.zip

    bash mesh-restore-orientdb.sh
    bash mesh-restore-uploads.sh

  mesh-restore-orientdb.sh: |-
    #!/bin/bash
    set -euxo pipefail
    source mesh-commons-vars.sh

    if [ -z ${ORIENTDB_ZIP} ]; then echo "ORIENTDB_ZIP not found"; exit 1; fi

    echo "will copy orientdb $ORIENTDB_ZIP backup to restore file ($BACKUPNFS_FOLDER/orientdb-restore/orientdb-restore.zip)"
    read -p "Press enter to continue"
    mkdir -p $BACKUPNFS_FOLDER/orientdb-restore
    cp -a $ORIENTDB_ZIP $BACKUPNFS_FOLDER/orientdb-restore/orientdb-restore.zip && ls $BACKUPNFS_FOLDER/orientdb-restore/
    echo "mesh-restore-orientdb > OK"

  mesh-restore-uploads.sh: |-
    #!/bin/bash
    set -euxo pipefail
    source mesh-commons-vars.sh

    if [ -z ${BINARY_TAR} ]; then echo "BINARY_TAR not found"; exit 1; fi
    if [ -z ${BACKUP_TMP_FOLDER} ]; then echo "BACKUP_TMP_FOLDER not found"; exit 1; fi

    read -p "Press enter to continue, will restore uploads"

    #restore binaries
    CURRENT_DATE=$(date +%d-%m-%Y_%H-%M-%S)
    RESTORE_WORKING_FOLDER=$BACKUP_TMP_FOLDER/$CURRENT_DATE

    mkdir -p $RESTORE_WORKING_FOLDER/old-getmesh-uploads/
    mkdir -p $RESTORE_WORKING_FOLDER/restored-getmesh-uploads/

    tar --same-owner -xvf $BINARY_TAR -C $RESTORE_WORKING_FOLDER/restored-getmesh-uploads/
    ls -arth $RESTORE_WORKING_FOLDER/restored-getmesh-uploads/

    touch /uploads/restore-upload-$CURRENT_DATE.tmp
    mv /uploads/* $RESTORE_WORKING_FOLDER/old-getmesh-uploads/
    ls -arth $RESTORE_WORKING_FOLDER/old-getmesh-uploads/

    mv $RESTORE_WORKING_FOLDER/restored-getmesh-uploads/* /uploads/
    ls -arth /uploads/
    echo "mesh-restore-uploads.sh > OK"

  mesh-backup-uploads.sh: |-
    #!/bin/bash
    set -euo pipefail
    source mesh-commons-vars.sh

    echo "invoke uploads backup then move it to "$TARGET_BACKUP_DIR

    if [ -z ${TARGET_BACKUP_DIR} ]; then echo "TARGET_BACKUP_DIR not found"; exit 1; fi
    if [ -z ${CURRENT_DATE} ]; then echo "CURRENT_DATE not found"; exit 1; fi
    #tar and keep permissions
    tar -cvpf $TARGET_BACKUP_DIR/uploads_$CURRENT_DATE.tar -C /uploads ./
    echo "mesh-backup-uploads.sh > OK"


  mesh-purge-old-backup.sh: |-
    #!/bin/bash
    set -euxo pipefail
    source mesh-commons-vars.sh

    cd $BACKUP_HISTORY_FOLDER
    echo "purging old backups in "$BACKUP_HISTORY_FOLDER
    if [ -z ${BACKUP_HISTORY_FOLDER} ]; then echo "$BACKUP_HISTORY_FOLDER not found"; exit 1; fi
    find $BACKUP_HISTORY_FOLDER -type d -mtime +{{ .Values.persistence.backup.keepDays }} | xargs rm -f -r
    echo "mesh-purge-old-backup.sh > OK"

binaryData:
  keystore.jceks: |-
{{ .Files.Get "secrets/keystore.jceks" | b64enc | indent 6 }}
