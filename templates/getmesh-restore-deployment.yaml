{{- if and (eq .Values.persistence.nfs.enabled true) (eq .Values.persistence.enabled true) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "getmesh.fullname" . }}-restore
  labels:
    app.kubernetes.io/name: {{ include "getmesh.name" . }}
    helm.sh/chart: {{ include "getmesh.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: getmesh-restore
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "getmesh.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: getmesh-restore
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "getmesh.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: getmesh-restore
    spec:
      containers:
        - name: restore-job
          image: "{{ .Values.toolsImage.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "while true; do echo 'invoke manually mesh-restore-latest-blue/green-PROD.sh inside this pod to restore MESH to latest available backup'; sleep 30;done"]
          env:
          - name: "MESH_INITIAL_ADMIN_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: {{ template "getmesh.fullname" . }}
                key: mesh-initial-admin-password
          - name: MESH_START_IN_READ_ONLY
            value: "true"
        {{- range $name, $value := .Values.getmesh.coreEnvironmentVariables }}
          - name: {{ tpl $name $ }}
            value: {{ tpl $value $ | quote }}
        {{- end }}
        {{- range $name, $value := .Values.getmesh.additionalEnvironmentVariables }}
          - name: {{ tpl $name $ }}
            value: {{ tpl $value $ | quote }}
        {{- end }}
          volumeMounts:
          - name: getmesh-config
            mountPath: /usr/local/bin
          - name: getmesh-config
            mountPath: /config/keystore.jceks
            subPath: keystore.jceks
          - name: getmesh-config
            mountPath: /config/default-distributed-db-config.json
            subPath: default-distributed-db-config.json
          - name: getmesh-config
            mountPath: /config/hazelcast.xml
            subPath: hazelcast.xml
          - name: getmesh-config
            mountPath: /config/logback.xml
            subPath: logback.xml
          - name: getmesh-uploads
            mountPath: uploads
            subPath: {{ template "getmesh.fullname.no.override" . }}-uploads
          - name: getmesh-uploads
            mountPath: /backups-nfs
            subPath: {{ template "getmesh.fullname.no.override" . }}-backups
          resources:
            limits:
              cpu: 1000m
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 256Mi
      securityContext: # mesh user/group
        runAsGroup: 1000
        runAsUser: 1000
        fsGroup: 1000
      volumes:
      - name: getmesh-config
        configMap:
          defaultMode: 0774
          name: {{ template "getmesh.fullname" . }}-config
      - name: getmesh-uploads
        persistentVolumeClaim:
          claimName: {{ template "getmesh.fullname.no.override" . }}-uploads
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: {{ include "getmesh.name" . }}
                    app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}
