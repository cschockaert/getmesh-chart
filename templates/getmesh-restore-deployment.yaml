{{- if and (eq .Values.persistence.nfs.enabled true) (eq .Values.persistence.enabled true) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "getmesh.fullname" . }}-restore
  labels:
    app.kubernetes.io/name: {{ include "getmesh.name" . }}
    helm.sh/chart: {{ include "getmesh.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: getmesh-restore
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "getmesh.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: getmesh-restore
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "getmesh.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: getmesh-restore
    spec:
      containers:
        - name: restore-job
          image: "cschockaert/mesh-tools:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          {{/*command: ["/bin/sh", "/config/backup.sh"]*/}}
          command: ["/bin/sh"]
          args: ["-c", "while true; do echo 'invoke manually /config/restore.sh inside this pod to restore getmesh to latest available backup'; sleep 30;done"]
          env:
          - name: "GETMESH_HOST"
            value: {{ template "getmesh.fullname" . }}-master.{{ .Release.Namespace }}.svc.cluster.local:8080
          - name: "ORIENTDB_BACKUP_RESTORE_DIRECTORY"
            value: "/backups-nfs/orientdb"
          - name: "BACKUP_HISTORY_FOLDER"
            value: "/backups-nfs/history"
          - name: "BACKUP_TMP_FOLDER"
            value: "/backups-nfs/tmp"
          - name: MESH_CLUSTER_NAME
            value: cluster-{{ template "getmesh.version.slug" . }}
          - name: MESH_CLUSTER_ENABLED # replica cannot work without cluster
            value: "true"
          - name: "hazelcast.kubernetes.service-dns"
            value: {{ template "getmesh.fullname" . }}-hazelcast.{{ .Release.Namespace }}.svc.cluster.local
          - name: MESH_ELASTICSEARCH_URL
            value: {{ tpl .Values.elasticsearch.url . | quote }}
        {{- range $name, $value := .Values.getmesh.additionalEnvironmentVariables }}
          - name: {{ tpl $name $ }}
            value: {{ tpl $value $ }}
        {{- end }}
          volumeMounts:
          - name: getmesh-config
            mountPath: "/config"
          - name: getmesh-uploads
            mountPath: "/uploads"
            subPath: {{ template "getmesh.fullname.no.override" . }}-uploads
          - name: getmesh-uploads
            mountPath: "/backups-nfs"
            subPath: {{ template "getmesh.fullname.no.override" . }}-backups
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 50m
              memory: 128Mi
      volumes:
      - name: getmesh-config
        configMap:
          name: {{ template "getmesh.fullname" . }}-config
      - name: getmesh-uploads
        persistentVolumeClaim:
          claimName: {{ template "getmesh.fullname.no.override" . }}-uploads
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: {{ include "getmesh.name" . }}
                    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}
