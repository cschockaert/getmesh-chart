# Default values for getmesh.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
image:
  repository: gentics/mesh
  tag: 1.4.0
  pullPolicy: IfNotPresent

toolsImage:
  repository: cschockaert/getmesh-tools # image used to make backup / restore

global: {}
  #uncomment with the right domain
  #domain: mydomain.com


ingress:
  enabled: true
  tls: true
  acme: false #if true will generate https certificate via letsencrypt
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 8m # allow larger http POST requests


resources: &resources
   limits:
    cpu: 2000m
    memory: 2048Mi
   requests:
    cpu: 500m
    memory: 1024Mi

persistence:
  enabled: true
  backup:
    enabled: true # if true will create a backup cronjob (only active if nfs is available)
    schedule: "0 3 * * *"
    keepDays: 120 # purge will remove backup older than this value in days

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined,  PVC must be created manually before volume will be bound
  # existingClaim:
  storageClass: "ssd"
  accessModes:
  - ReadWriteOnce
  size: 10Gi

  # nfs informations can be retreive with cmd
  # gcloud beta filestore instances list --project=project-id
  # nfs is used only is persistence is enabled
  # nfs is used to mount uploads volume (shared between master and replicas)
  # nfs is MANDATORY when using mesh.cluster with replicas
  nfs:
    enabled: true # if false same regular data volume will be used (NB: so binaries uploads will not be shared among getmesh instances)
    storage: 20Gi
    path: /default #NFS SERVER PATH
    server: X.X.X.X #NFS SERVER IP

monitoring:
  enabled: false
  prometheusName: prometheus-operator

getmesh:
  adminPassword: admin # will be set with this value at every mesh master node startup
  ui:
    enabled: false # if true will forward to a dedicated standalone ui
#    image:
#      repository: cschockaert/mesh-ui
#      tag: mesh-admin-ui-0-9-13
  replicas:
    readinessProbe:
      httpGet: {}
    livenessProbe:
      httpGet: {}
    resources:
      <<: *resources
      requests:
        cpu: 100m
        memory: 1024Mi
#    tolerations:
#    nodeSelector:
  master:
    readinessProbe:
      httpGet: {}
    livenessProbe:
      httpGet: {}
    resources:
      <<: *resources
#    tolerations:
#    nodeSelector:
  # dont change theses env variables
  # https://getmesh.io/docs/administration-guide/
  coreEnvironmentVariables:
    hazelcast.kubernetes.service-dns: '{{ template "getmesh.fullname" . }}-hazelcast.{{ .Release.Namespace }}.svc.cluster.local'
    MESH_MASTER_HOST: '{{ template "getmesh.fullname" . }}-master.{{ .Release.Namespace }}.svc.cluster.local:8080'
    MESH_CLUSTER_ENABLED:  "{{ .Values.getmesh.cluster.enabled }}"
    MESH_CLUSTER_NAME: 'cluster-{{ .Chart.Version | replace "." "-" }}-{{ template "getmesh.version.slug" . }}'
    MESH_UPDATECHECK: "false"
    MESH_ELASTICSEARCH_URL: "{{ tpl .Values.elasticsearch.url . }}"
    MESH_MONITORING_HTTP_HOST: "0.0.0.0"
    MESH_CLUSTER_NETWORK_HOST: "0.0.0.0"
    MESH_CLUSTER_VERTX_PORT: "4848"
    MESH_GRAPH_BACKUP_DIRECTORY: "/backups-nfs/orientdb"
    MESH_AUTH_KEYSTORE_PATH: "/config/keystore.jceks"
    MESH_GRAPH_DB_DIRECTORY: "/graphdb"
    MESH_BINARY_DIR: "/uploads"
    MESH_CONTENT_AUTO_PURGE: "true"
    MESH_INITIAL_ADMIN_PASSWORD_FORCE_RESET: "false"
    JAVA_START_OPTIONS: "-XshowSettings:vm -showversion -Xlog:gc"
    KC_ENABLED: "{{ .Values.oauth2.enabled }}"
    KC_URL: "{{ .Values.oauth2.authServerUrl }}"
    KC_REALM: "{{ .Values.oauth2.authServerRealm }}"
    KC_CLIENT_ID: "{{ .Values.oauth2.authServerClientId }}"
  additionalEnvironmentVariables:
    JAVA_TOOL_OPTIONS: "-XX:InitialRAMPercentage=25 -XX:MaxRAMPercentage=50 -XX:MaxDirectMemorySize=384m -Dstorage.diskCache.bufferSize=384 -Dhazelcast.diagnostics.enabled=true"
  cluster:
    enabled: true
    # IMPORTANT Notes :
    #
    # When installing a new getmesh release, or when starting a new from a backup it should be started first with cluster.enabled = false
    # then you can run this scripts : bash /config/mesh-search-clear, mesh-search-sync, mesh-consistency-repair
    # after that, reinstall this release with cluster enabled TRUE
    #
    # Note 2: if cluster enabled nfs persistence SHOULD be enabled too
    replicas: 2 #if cluster enabled is false set replicas count to 0

elasticsearch:
  enabled: true #if not enabled, es will be started in getmesh container, else es will be started outside using official elasticsearch chart
  # getmesh use elasticsearch-oss 6.8.0
  image:
    tag: 6.8.2
  url: http://{{ .Release.Name }}-elasticsearch-client:9200
  data:
    antiAffinity: "hard"
    persistence:
      size: "10Gi"
      storageClass: ssd
  client:
    antiAffinity: "hard"
  master:
    antiAffinity: "hard"
    persistence:
      size: "4Gi"
      storageClass: ssd
  cluster: #quick and dirty fix to get cluster name relative to discovery service fullname (differents clusters cant join each others)
    name: c-${DISCOVERY_SERVICE}

autoscaling:
  enabled: false
  maxReplicas: 5
  minReplicas: 2
  targetCPUUtilizationPercentage: 80 # percent against request cpu

oauth2:
  enabled: false
  authServerUrl: "https://oidc:443/" # default client id is 'mesh'
  authServerRealm: "internal"
  authServerClientId: "mesh"
